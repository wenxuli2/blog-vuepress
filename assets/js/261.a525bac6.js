(window.webpackJsonp=window.webpackJsonp||[]).push([[261],{739:function(e,t,n){"use strict";n.r(t);var a=n(20),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"native-node-modules"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#native-node-modules"}},[e._v("#")]),e._v(" Native Node Modules")]),e._v(" "),n("p",[e._v("原生Node.js模块由Electron支持，但由于Electron具有与给定Node.js不同的 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Application_binary_interface",target:"_blank",rel:"noopener noreferrer"}},[e._v("应用二进制接口 (ABI)"),n("OutboundLink")],1),e._v("(由于使用Chromium的 BoringSL 而不是 OpenSSL 等 差异)，您使用的原生 模块需要为Electron重新编译。 否则，当您尝试运行您的应用程序时， 将会遇到以下的错误：")]),e._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[e._v("Error: The module "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/path/to/native/module.node'")]),e._v("\nwas compiled against a different Node.js version using\nNODE_MODULE_VERSION "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$XYZ")]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" This version of Node.js requires\nNODE_MODULE_VERSION "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$ABC")]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" Please try re-compiling or re-installing\nthe module "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("for instance, using "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" rebuild"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v(" or "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(".\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("h2",{attrs:{id:"如何安装原生模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何安装原生模块"}},[e._v("#")]),e._v(" 如何安装原生模块")]),e._v(" "),n("p",[e._v("有多种不同的方法来安装原生模块：")]),e._v(" "),n("h3",{attrs:{id:"为-electron-安装并重新编译模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为-electron-安装并重新编译模块"}},[e._v("#")]),e._v(" 为 Electron 安装并重新编译模块")]),e._v(" "),n("p",[e._v("您可以像其他 Node 项目一样安装模块，然后用 "),n("a",{attrs:{href:"https://github.com/electron/electron-rebuild",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("electron-rebuild")]),n("OutboundLink")],1),e._v(" 包重建这些模块以适配 Electron 。 这个包可以自动识别当前 Electron 版本，为你的应用自动完成下载 headers、重新编译原生模块等步骤。 如果您正在使用 "),n("a",{attrs:{href:"https://electronforge.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Electron Forge"),n("OutboundLink")],1),e._v("，这个工具将在开发模式和发布时自动使用。")]),e._v(" "),n("p",[e._v("For example, to install the standalone "),n("code",[e._v("electron-rebuild")]),e._v(" tool and then rebuild modules with it via the command line:")]),e._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" --save-dev electron-rebuild\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Every time you run "npm install", run this:')]),e._v("\n./node_modules/.bin/electron-rebuild\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If you have trouble on Windows, try:")]),e._v("\n."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("node_modules"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v(".bin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("electron-rebuild.cmd\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("For more information on usage and integration with other tools such as "),n("a",{attrs:{href:"https://github.com/electron/electron-packager",target:"_blank",rel:"noopener noreferrer"}},[e._v("Electron Packager"),n("OutboundLink")],1),e._v(", consult the project's README.")]),e._v(" "),n("h3",{attrs:{id:"通过-npm-安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过-npm-安装"}},[e._v("#")]),e._v(" 通过 "),n("code",[e._v("npm")]),e._v(" 安装")]),e._v(" "),n("p",[e._v("只要设置一些系统环境变量，你就可以通过 "),n("code",[e._v("npm")]),e._v(" 直接安装原生模块。")]),e._v(" "),n("p",[e._v("例如，要安装所有Electron的依赖：")]),e._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Electron 的版本。")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("npm_config_target")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.2")]),e._v(".3\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Electron的目标架构, 可用的架构列表请参见")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# https://electronjs.org/docs/tutorial/support#supported-platforms")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("npm_config_arch")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("x64\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("npm_config_target_arch")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("x64\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 下载 Electron 的 headers。")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("npm_config_disturl")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://electronjs.org/headers\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 告诉 node-pre-gyp 我们是在为 Electron 生成模块。")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("npm_config_runtime")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("electron\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 告诉 node-pre-gyp 从源代码构建模块。")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("npm_config_build_from_source")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 安装所有依赖，并缓存到 ~/.electron-gyp。")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[n("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("HOME")])]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=~")]),e._v("/.electron-gyp "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("h3",{attrs:{id:"为-electron-手动编译"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为-electron-手动编译"}},[e._v("#")]),e._v(" 为 Electron 手动编译")]),e._v(" "),n("p",[e._v("如果你是一个原生模块的开发人员，想在 Electron 中进行测试， 你可能要手动编译 Electron 模块。 你可以 使用 "),n("code",[e._v("node-gyp")]),e._v(" 直接编译：")]),e._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /path-to-module/\n"),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[n("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("HOME")])]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=~")]),e._v("/.electron-gyp node-gyp rebuild --target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.2")]),e._v(".3 --arch"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("x64 --dist-url"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://electronjs.org/headers\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("ul",[n("li",[n("code",[e._v("HOME=~/.electron-gyp")]),e._v(" 设置去哪找头文件")]),e._v(" "),n("li",[n("code",[e._v("--target=1.2.3")]),e._v(" 设置了 Electron 的版本。")]),e._v(" "),n("li",[n("code",[e._v("--dist-url=...")]),e._v("设置了 Electron 的 headers 的下载地址。")]),e._v(" "),n("li",[n("code",[e._v("--arch=x64")]),e._v(" 设置了该模块为适配64位操作系统而编译。")])]),e._v(" "),n("h3",{attrs:{id:"为electron的自定义编译手动编译"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为electron的自定义编译手动编译"}},[e._v("#")]),e._v(" 为Electron的自定义编译手动编译")]),e._v(" "),n("p",[e._v("如果是为一个与公共发行版不匹配的Electron自定义版本编译原生Node模块，需要让"),n("code",[e._v("npm")]),e._v("使用你的Electron自定义版本所对应的Node版本。")]),e._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" rebuild --nodedir"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/path/to/src/out/Default/gen/node_headers\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("h2",{attrs:{id:"故障排查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#故障排查"}},[e._v("#")]),e._v(" 故障排查")]),e._v(" "),n("p",[e._v("如果您安装了本机模块并发现它无法正常工作，则需要检查以下内容：")]),e._v(" "),n("ul",[n("li",[e._v("当有疑问时，请先执行 "),n("code",[e._v("electron-rebuild")]),e._v("。")]),e._v(" "),n("li",[e._v("确保原生模块与Electron应用程序的目标平台和体系结构兼容。")]),e._v(" "),n("li",[e._v("确保在该模块的"),n("code",[e._v("binding.gyp")]),e._v("中"),n("code",[e._v("win_delay_load_hook")]),e._v("没有被设置为"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[e._v("如果升级了 Electron，你通常需要重新编译这些模块。")])]),e._v(" "),n("h3",{attrs:{id:"关于win-delay-load-hook的说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于win-delay-load-hook的说明"}},[e._v("#")]),e._v(" 关于"),n("code",[e._v("win_delay_load_hook")]),e._v("的说明")]),e._v(" "),n("p",[e._v("在Windows上，默认情况下，"),n("code",[e._v("node-gyp")]),e._v("将原生模块与"),n("code",[e._v("node.dll")]),e._v("链接。 然而，在Electron 4.x和更高的版本中，原生模块需要的symbols由"),n("code",[e._v("electron.exe")]),e._v("导出，并且没有"),n("code",[e._v("node.dll")]),e._v("。 In order to load native modules on Windows, "),n("code",[e._v("node-gyp")]),e._v(" installs a "),n("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/z9h1h6ty.aspx",target:"_blank",rel:"noopener noreferrer"}},[e._v("delay-load hook"),n("OutboundLink")],1),e._v(" that triggers when the native module is loaded, and redirects the "),n("code",[e._v("node.dll")]),e._v(" reference to use the loading executable instead of looking for "),n("code",[e._v("node.dll")]),e._v(" in the library search path (which would turn up nothing). As such, on Electron 4.x and higher, "),n("code",[e._v("'win_delay_load_hook': 'true'")]),e._v(" is required to load native modules.")]),e._v(" "),n("p",[e._v("If you get an error like "),n("code",[e._v("Module did not self-register")]),e._v(", or "),n("code",[e._v("The specified procedure could not be found")]),e._v(", it may mean that the module you're trying to use did not correctly include the delay-load hook.  If the module is built with node-gyp, ensure that the "),n("code",[e._v("win_delay_load_hook")]),e._v(" variable is set to "),n("code",[e._v("true")]),e._v(" in the "),n("code",[e._v("binding.gyp")]),e._v(" file, and isn't getting overridden anywhere.  If the module is built with another system, you'll need to ensure that you build with a delay-load hook installed in the main "),n("code",[e._v(".node")]),e._v(" file. Your "),n("code",[e._v("link.exe")]),e._v(" invocation should look like this:")]),e._v(" "),n("div",{staticClass:"language-plaintext line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plaintext"}},[n("code",[e._v(' link.exe /OUT:"foo.node" "...\\node.lib" delayimp.lib /DELAYLOAD:node.exe /DLL\n     "my_addon.obj" "win_delay_load_hook.obj"\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("In particular, it's important that:")]),e._v(" "),n("ul",[n("li",[e._v("you link against "),n("code",[e._v("node.lib")]),e._v(" from "),n("em",[e._v("Electron")]),e._v(" and not Node. If you link against the wrong "),n("code",[e._v("node.lib")]),e._v(" you will get load-time errors when you require the module in Electron.")]),e._v(" "),n("li",[e._v("you include the flag "),n("code",[e._v("/DELAYLOAD:node.exe")]),e._v(". If the "),n("code",[e._v("node.exe")]),e._v(" link is not delayed, then the delay-load hook won't get a chance to fire and the node symbols won't be correctly resolved.")]),e._v(" "),n("li",[n("code",[e._v("win_delay_load_hook.obj")]),e._v(" is linked directly into the final DLL. If the hook is set up in a dependent DLL, it won't fire at the right time.")])]),e._v(" "),n("p",[e._v("See "),n("a",{attrs:{href:"https://github.com/nodejs/node-gyp/blob/e2401e1395bef1d3c8acec268b42dc5fb71c4a38/src/win_delay_load_hook.cc",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("node-gyp")]),n("OutboundLink")],1),e._v(" for an example delay-load hook if you're implementing your own.")]),e._v(" "),n("h2",{attrs:{id:"依赖于-prebuild-的模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖于-prebuild-的模块"}},[e._v("#")]),e._v(" 依赖于 "),n("code",[e._v("prebuild")]),e._v(" 的模块")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/prebuild/prebuild",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("prebuild")]),n("OutboundLink")],1),e._v(" provides a way to publish native Node modules with prebuilt binaries for multiple versions of Node and Electron.")]),e._v(" "),n("p",[e._v("If the "),n("code",[e._v("prebuild")]),e._v("-powered module provide binaries for the usage in Electron, make sure to omit "),n("code",[e._v("--build-from-source")]),e._v(" and the "),n("code",[e._v("npm_config_build_from_source")]),e._v(" environment variable in order to take full advantage of the prebuilt binaries.")]),e._v(" "),n("h2",{attrs:{id:"依赖于-node-pre-gyp-的模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖于-node-pre-gyp-的模块"}},[e._v("#")]),e._v(" 依赖于 "),n("code",[e._v("node-pre-gyp")]),e._v(" 的模块")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/mapbox/node-pre-gyp",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("node-pre-gyp")]),e._v(" 工具"),n("OutboundLink")],1),e._v(" 提供一种部署原生 Node 预编译二进制模块的方法， 许多流行的模块都是使用它。")]),e._v(" "),n("p",[e._v("Sometimes those modules work fine under Electron, but when there are no Electron-specific binaries available, you'll need to build from source. Because of this, it is recommended to use "),n("code",[e._v("electron-rebuild")]),e._v(" for these modules.")]),e._v(" "),n("p",[e._v("If you are following the "),n("code",[e._v("npm")]),e._v(" way of installing modules, you'll need to pass "),n("code",[e._v("--build-from-source")]),e._v(" to "),n("code",[e._v("npm")]),e._v(", or set the "),n("code",[e._v("npm_config_build_from_source")]),e._v(" environment variable.")])])}),[],!1,null,null,null);t.default=s.exports}}]);