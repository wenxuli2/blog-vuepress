(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{502:function(s,t,e){"use strict";e.r(t);var n=e(20),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v("npm i gulp-cli -g\nnpx mkdirp my-project\ncd my-project\nnpm init\nnpm i gulp --save-dev\n\n每个function都是一个任务，任务分为公开任务和私有任务，未导出就是私有任务，导出就是公开任务。function必须接受一个callback作为参数，或者return出stream、promise、event emitter、child process、 observable这五种类型的一个值。\n")])])]),e("h3",{attrs:{id:"初始化项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化项目"}},[s._v("#")]),s._v(" 初始化项目")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v('npx mkdirp my-gulp4-project cd my-gulp4-project npm i gulp -D npm i gulp-sass gulp-live-server gulp-uglify gulp-clean-css -D\nmkdir src,"./src/img","./src/css","./src/js","./src/html","./src/styles",dist,"./dist/img","./dist/css","./dist/js","./dist/html",\nnew-item gulpfile.js,README.MD,"./src/html/index.html","./src/styles/index.scss","./src/js/index.js"\n')])])]),e("h3",{attrs:{id:"gulpfile-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gulpfile-js"}},[s._v("#")]),s._v(" gulpfile.js")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v("const {src,dest,watch,parallel} = require('gulp') const sass = require('gulp-sass')(require('sass')); // 使用sass const gls = require('gulp-live-server') // 创建服务 const uglify = require('gulp-uglify'); // 压缩js const cleanCSS = require('gulp-clean-css'); // 压缩css\n// 处理html：输出\nfunction html(){\n    return src('src/*.html').pipe(dest('dist'))\n}\n// 处理css库：压缩，输出\nfunction cssInit(){\n    return src('src/styles/*.css').pipe(cleanCSS({compatibility: 'ie8'})).pipe(dest('dist/css'))\n}\n// 处理样式：编译sass，压缩，输出\nfunction css(){\n    return src('src/styles/*.scss').pipe(sass()).pipe(cleanCSS({compatibility: 'ie8'})).pipe(dest('dist/css'))\n}\n// 处理js库，不需压缩直接输出\nfunction jsLibInit(){\n    return src('src/js/lib/*.js').pipe(dest('dist/js/lib'))\n}\n// 处理js：抛去库，压缩，输出\nfunction js(){\n    return src(['src/js/**/*.js','!src/js/lib/**']).pipe(uglify()).pipe(dest('dist/js'))\n}\n// 处理图片：输出\nfunction img(){\n    return src('src/img/**').pipe(dest('dist/img'))\n}\n\n// 启动server\nfunction server(cb){\n    const server = gls.static('dist',80)\n    server.start()\n    cb()\n}\n// 监听变化\nfunction watchChange(cb){\n    watch('src/*.html', html)\n    watch('src/styles/*.scss', css)\n    watch(['src/js/**/*.js','!src/js/lib/**'],js)\n    watch('src/img/**',img)\n    cb()\n}\nexports.server = parallel(html,cssInit,css,img,jsLibInit,js,server,watchChange)")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);