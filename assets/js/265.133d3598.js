(window.webpackJsonp=window.webpackJsonp||[]).push([[265],{746:function(e,t,a){"use strict";a.r(t);var n=a(20),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"windows-on-arm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#windows-on-arm"}},[e._v("#")]),e._v(" Windows on ARM")]),e._v(" "),a("p",[e._v("如果您的应用使用Electron 6.0.8及之后的版本，您现在可以在基于ARM的Windows10上构建它。 This considerably improves performance, but requires recompilation of any native modules used in your app. It may also require small fixups to your build and packaging scripts.")]),e._v(" "),a("h2",{attrs:{id:"running-a-basic-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-a-basic-app"}},[e._v("#")]),e._v(" Running a basic app")]),e._v(" "),a("p",[e._v("If your app doesn't use any native modules, then it's really easy to create an Arm version of your app.")]),e._v(" "),a("ol",[a("li",[e._v("Make sure that your app's "),a("code",[e._v("node_modules")]),e._v(" directory is empty.")]),e._v(" "),a("li",[e._v("Using a "),a("em",[e._v("Command Prompt")]),e._v(", run "),a("code",[e._v("set npm_config_arch=arm64")]),e._v(" before running "),a("code",[e._v("npm install")]),e._v("/"),a("code",[e._v("yarn install")]),e._v(" as usual.")]),e._v(" "),a("li",[a("RouterLink",{attrs:{to:"/《Electron中文文档》/tutorial/quick-start.html#prerequisites"}},[e._v("If you have Electron installed as a development dependency")]),e._v(", npm will download and unpack the arm64 version. You can then package and distribute your app as normal.")],1)]),e._v(" "),a("h2",{attrs:{id:"general-considerations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#general-considerations"}},[e._v("#")]),e._v(" General considerations")]),e._v(" "),a("h3",{attrs:{id:"architecture-specific-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#architecture-specific-code"}},[e._v("#")]),e._v(" Architecture-specific code")]),e._v(" "),a("p",[e._v("Lots of Windows-specific code contains if... else logic that selects between either the x64 or x86 architectures.")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("arch "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'x64'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Do 64-bit thing...")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Do 32-bit thing...")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("If you want to target arm64, logic like this will typically select the wrong architecture, so carefully check your application and build scripts for conditions like this. In custom build and packaging scripts, you should always check the value of "),a("code",[e._v("npm_config_arch")]),e._v(" in the environment, rather than relying on the current process arch.")]),e._v(" "),a("h3",{attrs:{id:"native-modules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#native-modules"}},[e._v("#")]),e._v(" Native modules")]),e._v(" "),a("p",[e._v("If you use native modules, you must make sure that they compile against v142 of the MSVC compiler (provided in Visual Studio 2017). 您还必须检查 native module 提供或引用的 "),a("code",[e._v(".dll")]),e._v(" 或 "),a("code",[e._v(".lib")]),e._v(" 文件是否可用于 Arm 上的 Windows。")]),e._v(" "),a("h3",{attrs:{id:"测试应用程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试应用程序"}},[e._v("#")]),e._v(" 测试应用程序")]),e._v(" "),a("p",[e._v("To test your app, use a Windows on Arm device running Windows 10 (version 1903 or later). Make sure that you copy your application over to the target device - Chromium's sandbox will not work correctly when loading your application assets from a network location.")]),e._v(" "),a("h2",{attrs:{id:"development-prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#development-prerequisites"}},[e._v("#")]),e._v(" Development prerequisites")]),e._v(" "),a("h3",{attrs:{id:"node-js-node-gyp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-node-gyp"}},[e._v("#")]),e._v(" Node.js/node-gyp")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js v12.9.0 or later is recommended."),a("OutboundLink")],1),e._v(" If updating to a new version of Node is  undesirable, you can instead "),a("a",{attrs:{href:"https://github.com/nodejs/node-gyp/wiki/Updating-npm's-bundled-node-gyp",target:"_blank",rel:"noopener noreferrer"}},[e._v("update npm's copy of node-gyp manually"),a("OutboundLink")],1),e._v(" to version 5.0.2 or later, which contains the required changes to compile native modules for Arm.")]),e._v(" "),a("h3",{attrs:{id:"visual-studio-2017"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#visual-studio-2017"}},[e._v("#")]),e._v(" Visual Studio 2017")]),e._v(" "),a("p",[e._v("Visual Studio 2017 (any edition) is required for cross-compiling native modules. You can download Visual Studio Community 2017 via Microsoft's "),a("a",{attrs:{href:"https://visualstudio.microsoft.com/dev-essentials/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Visual Studio Dev Essentials program"),a("OutboundLink")],1),e._v(". After installation, you can add the Arm-specific components by running the following from a "),a("em",[e._v("Command Prompt")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-powershell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[e._v("vs_installer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exe ^\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("add Microsoft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("VisualStudio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Workload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("NativeDesktop ^\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("add Microsoft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("VisualStudio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("VC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ATLMFC ^\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("add Microsoft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("VisualStudio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("VC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Tools"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ARM64 ^\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("add Microsoft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("VisualStudio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("VC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("MFC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ARM64 ^\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("includeRecommended\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("h4",{attrs:{id:"creating-a-cross-compilation-command-prompt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-cross-compilation-command-prompt"}},[e._v("#")]),e._v(" Creating a cross-compilation command prompt")]),e._v(" "),a("p",[e._v("Setting "),a("code",[e._v("npm_config_arch=arm64")]),e._v(" in the environment creates the correct arm64 "),a("code",[e._v(".obj")]),e._v(" files, but the standard "),a("em",[e._v("Developer Command Prompt for VS 2017")]),e._v(" will use the x64 linker. To fix this:")]),e._v(" "),a("ol",[a("li",[e._v("Duplicate the "),a("em",[e._v("x64_x86 Cross Tools Command Prompt for VS 2017")]),e._v(" shortcut (e.g. by locating it in the start menu, right clicking, selecting "),a("em",[e._v("Open File Location")]),e._v(", copying and pasting) to somewhere convenient.")]),e._v(" "),a("li",[e._v("Right click the new shortcut and choose "),a("em",[e._v("Properties")]),e._v(".")]),e._v(" "),a("li",[e._v("Change the "),a("em",[e._v("Target")]),e._v(" field to read "),a("code",[e._v("vcvarsamd64_arm64.bat")]),e._v(" at the end instead of "),a("code",[e._v("vcvarsamd64_x86.bat")]),e._v(".")])]),e._v(" "),a("p",[e._v("If done successfully, the command prompt should print something similar to this on startup:")]),e._v(" "),a("div",{staticClass:"language-bat line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("**********************************************************************\n** Visual Studio 2017 Developer Command Prompt v15.9.15\n** Copyright (c) 2017 Microsoft Corporation\n**********************************************************************\n[vcvarsall.bat] Environment initialized for: 'x64_arm64'\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("If you want to develop your application directly on a Windows on Arm device, substitute "),a("code",[e._v("vcvarsx86_arm64.bat")]),e._v(" in "),a("em",[e._v("Target")]),e._v(" so that cross-compilation can happen with the device's x86 emulation.")]),e._v(" "),a("h3",{attrs:{id:"linking-against-the-correct-node-lib"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linking-against-the-correct-node-lib"}},[e._v("#")]),e._v(" Linking against the correct "),a("code",[e._v("node.lib")])]),e._v(" "),a("p",[e._v("By default, "),a("code",[e._v("node-gyp")]),e._v(" unpacks Electron's node headers and downloads the x86 and x64 versions of "),a("code",[e._v("node.lib")]),e._v(" into "),a("code",[e._v("%APPDATA%\\..\\Local\\node-gyp\\Cache")]),e._v(", but it does not download the arm64 version ("),a("a",{attrs:{href:"https://github.com/nodejs/node-gyp/pull/1875",target:"_blank",rel:"noopener noreferrer"}},[e._v("a fix for this is in development"),a("OutboundLink")],1),e._v(".) To fix this:")]),e._v(" "),a("ol",[a("li",[e._v("Download the arm64 "),a("code",[e._v("node.lib")]),e._v(" from https://electronjs.org/headers/v6.0.9/win-arm64/node.lib")]),e._v(" "),a("li",[e._v("Move it to "),a("code",[e._v("%APPDATA%\\..\\Local\\node-gyp\\Cache\\6.0.9\\arm64\\node.lib")])])]),e._v(" "),a("p",[e._v("Substitute "),a("code",[e._v("6.0.9")]),e._v(" for the version you're using.")]),e._v(" "),a("h2",{attrs:{id:"cross-compiling-native-modules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cross-compiling-native-modules"}},[e._v("#")]),e._v(" Cross-compiling native modules")]),e._v(" "),a("p",[e._v("After completing all of the above, open your cross-compilation command prompt and run "),a("code",[e._v("set npm_config_arch=arm64")]),e._v(". Then use "),a("code",[e._v("npm install")]),e._v(" to build your project as normal. As with cross-compiling x86 modules, you may need to remove "),a("code",[e._v("node_modules")]),e._v(" to force recompilation of native modules if they were previously compiled for another architecture.")]),e._v(" "),a("h2",{attrs:{id:"debugging-native-modules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debugging-native-modules"}},[e._v("#")]),e._v(" Debugging native modules")]),e._v(" "),a("p",[e._v("Debugging native modules can be done with Visual Studio 2017 (running on your development machine) and corresponding "),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/visualstudio/debugger/remote-debugging-cpp?view=vs-2019",target:"_blank",rel:"noopener noreferrer"}},[e._v("Visual Studio Remote Debugger"),a("OutboundLink")],1),e._v(" running on the target device. To debug:")]),e._v(" "),a("ol",[a("li",[e._v("在目标设备上通过_命令提示符_启动 "),a("code",[e._v(".exe")]),e._v(" 应用(传递 "),a("code",[e._v("--inspect-brk")]),e._v(" 参数可以在加载任何 native modules 之前暂停应用)。")]),e._v(" "),a("li",[e._v("Launch Visual Studio 2017 on your development machine.")]),e._v(" "),a("li",[e._v("通过选择 _调试 > _ 访问并输入设备的 IP 地址和 Visual Studio 远程调试器工具显示的端口号，连接到目标设备。")]),e._v(" "),a("li",[e._v("Click "),a("em",[e._v("Refresh")]),e._v(" and select the "),a("RouterLink",{attrs:{to:"/《Electron中文文档》/development/debug-instructions-windows.html"}},[e._v("appropriate Electron process to attach")]),e._v(".")],1),e._v(" "),a("li",[e._v("You may need to make sure that any symbols for native modules in your app are loaded correctly. 要配置此内容，请进入 Visual Studio 2017_Debug > Options..._，and add the folders containing your "),a("code",[e._v(".pdb")]),e._v(" symbols under "),a("em",[e._v("Debugging > Symbols")]),e._v(".")]),e._v(" "),a("li",[e._v("Once attached, set any appropriate breakpoints and resume JavaScript execution using Chrome's "),a("RouterLink",{attrs:{to:"/《Electron中文文档》/tutorial/debugging-main-process.html"}},[e._v("remote tools for Node")]),e._v(".")],1)]),e._v(" "),a("h2",{attrs:{id:"getting-additional-help"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-additional-help"}},[e._v("#")]),e._v(" Getting additional help")]),e._v(" "),a("p",[e._v("If you encounter a problem with this documentation, or if your app works when compiled for x86 but not for arm64, please "),a("RouterLink",{attrs:{to:"/《Electron中文文档》/development/issues.html"}},[e._v("file an issue")]),e._v(' with "Windows on Arm" in the title.')],1)])}),[],!1,null,null,null);t.default=s.exports}}]);