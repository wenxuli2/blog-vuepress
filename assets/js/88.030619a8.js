(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{565:function(e,t,s){"use strict";s.r(t);var a=s(20),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"messageportmain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#messageportmain"}},[e._v("#")]),e._v(" MessagePortMain")]),e._v(" "),s("p",[s("code",[e._v("MessagePortMain")]),e._v(" 是 DOM "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/MessagePort",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("MessagePort")]),s("OutboundLink")],1),e._v(" 对象的主进程等价对象。 它的行为类似于DOM版本，不同的是它使用 Node.js "),s("code",[e._v("EventEmitter")]),e._v(" 事件系统，而不是 DOM "),s("code",[e._v("EventTarget")]),e._v(" 系统。 这意味着你应该用 "),s("code",[e._v("port.on('message', ...)")]),e._v(" 来监听事件, 来代替 "),s("code",[e._v("port.onmessage = ...")]),e._v(" 或 "),s("code",[e._v("port.addEventListener('message', ...)")])]),e._v(" "),s("p",[e._v("关于 channel 消息的使用文档详见 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API",target:"_blank",rel:"noopener noreferrer"}},[e._v("Channel Messaging API"),s("OutboundLink")],1)]),e._v(" "),s("p",[s("code",[e._v("MessagePortMain")]),e._v(" 是一个 [EventEmitter][event-emitter].")]),e._v(" "),s("h2",{attrs:{id:"class-messageportmain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-messageportmain"}},[e._v("#")]),e._v(" Class: MessagePortMain")]),e._v(" "),s("blockquote",[s("p",[e._v("主进程中用于通道消息传递的端口接口。")])]),e._v(" "),s("p",[e._v("Process: "),s("RouterLink",{attrs:{to:"/《Electron中文文档》/glossary.html#main-process"}},[e._v("Main")]),s("br"),e._v(" "),s("em",[e._v("This class is not exported from the "),s("code",[e._v("'electron'")]),e._v(" module. It is only available as a return value of other methods in the Electron API.")])],1),e._v(" "),s("h3",{attrs:{id:"实例方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),s("h4",{attrs:{id:"port-postmessage-message-transfer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#port-postmessage-message-transfer"}},[e._v("#")]),e._v(" "),s("code",[e._v("port.postMessage(message, [transfer])")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("message")]),e._v(" any")]),e._v(" "),s("li",[s("code",[e._v("transfer")]),e._v(" MessagePortMain[] (可选)")])]),e._v(" "),s("p",[e._v("从端口发送消息，并可选地将对象的所有权转移到其他浏览上下文。")]),e._v(" "),s("h4",{attrs:{id:"port-start"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#port-start"}},[e._v("#")]),e._v(" "),s("code",[e._v("port.start()")])]),e._v(" "),s("p",[e._v("开始发送在端口上排队的消息。 消息将先缓存到队列, 直到此方法被调用。")]),e._v(" "),s("h4",{attrs:{id:"port-close"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#port-close"}},[e._v("#")]),e._v(" "),s("code",[e._v("port.close()")])]),e._v(" "),s("p",[e._v("断开端口连接")]),e._v(" "),s("h3",{attrs:{id:"实例事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例事件"}},[e._v("#")]),e._v(" 实例事件")]),e._v(" "),s("h4",{attrs:{id:"event-message"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-message"}},[e._v("#")]),e._v(" Event: 'message'")]),e._v(" "),s("p",[e._v("返回:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("messageEvent")]),e._v(" Object\n"),s("ul",[s("li",[s("code",[e._v("data")]),e._v(" any")]),e._v(" "),s("li",[s("code",[e._v("ports")]),e._v(" MessagePortMain[]")])])])]),e._v(" "),s("p",[e._v("MessagePortMain 对象收到消息时触发此事件")]),e._v(" "),s("h4",{attrs:{id:"事件-close"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件-close"}},[e._v("#")]),e._v(" 事件： 'close'")]),e._v(" "),s("p",[e._v("当MessagePortMain 对象的远程端断开连接时触发此事件")])])}),[],!1,null,null,null);t.default=r.exports}}]);