(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{560:function(n,t,s){"use strict";s.r(t);var a=s(20),e=Object(a.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"ipcmain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ipcmain"}},[n._v("#")]),n._v(" ipcMain")]),n._v(" "),s("blockquote",[s("p",[n._v("从主进程到渲染进程的异步通信。")])]),n._v(" "),s("p",[n._v("进程："),s("RouterLink",{attrs:{to:"/《Electron中文文档》/glossary.html#main-process"}},[n._v("主进程")])],1),n._v(" "),s("p",[s("code",[n._v("ipcRenderer")]),n._v(" 是一个 "),s("a",{attrs:{href:"https://nodejs.org/api/events.html#events_class_eventemitter",target:"_blank",rel:"noopener noreferrer"}},[n._v("EventEmitter"),s("OutboundLink")],1),n._v(" 的实例。 当在主进程中使用时，它处理从渲染器进程（网页）发送出来的异步和同步信息。 从渲染器进程发送的消息将被发送到该模块。")]),n._v(" "),s("h2",{attrs:{id:"发送消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发送消息"}},[n._v("#")]),n._v(" 发送消息")]),n._v(" "),s("p",[n._v("也可以从主进程向渲染进程发送消息，查阅"),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/web-contents.html#contentssendchannel-args"}},[n._v("ebContents.send")]),n._v("获取更多信息。")],1),n._v(" "),s("ul",[s("li",[n._v("发送消息时，事件名称为"),s("code",[n._v("channel")]),n._v("。")]),n._v(" "),s("li",[n._v("回复同步信息时，需要设置"),s("code",[n._v("event.returnValue")]),n._v("。")]),n._v(" "),s("li",[n._v("可以使用"),s("code",[n._v("event.reply(...)")]),n._v("将异步消息发送回发送者。  此方法将自动处理从非主 frame 发送的消息(比如： iframes)。相应的发送方法是: "),s("code",[n._v("event.sender.send(...)")]),n._v(" 它将总是把消息发送到主 frame")])]),n._v(" "),s("p",[n._v("下面是在渲染和主进程之间发送和处理消息的一个例子：")]),n._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 在主进程中.")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" ipcMain "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'electron'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\nipcMain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'asynchronous-message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" arg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=>")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v('// prints "ping"')]),n._v("\n  event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("reply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'asynchronous-reply'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'pong'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\nipcMain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'synchronous-message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" arg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=>")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v('// prints "ping"')]),n._v("\n  event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("returnValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'pong'")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//在渲染器进程 (网页) 中。")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// NB. Electron APIs are only accessible from preload, unless contextIsolation is disabled.")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// See https://www.electronjs.org/docs/tutorial/process-model#preload-scripts for more details.")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" ipcRenderer "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'electron'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("ipcRenderer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("sendSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'synchronous-message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'ping'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v('// prints "pong"')]),n._v("\n\nipcRenderer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'asynchronous-reply'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" arg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=>")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v('// prints "pong"')]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\nipcRenderer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("send")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'asynchronous-message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'ping'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("h2",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[n._v("#")]),n._v(" 方法")]),n._v(" "),s("p",[n._v("IpcMain模块有以下方法来侦听事件：")]),n._v(" "),s("h3",{attrs:{id:"ipcmain-on-channel-listener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ipcmain-on-channel-listener"}},[n._v("#")]),n._v(" "),s("code",[n._v("ipcMain.on(channel, listener)")])]),n._v(" "),s("ul",[s("li",[s("code",[n._v("channel")]),n._v(" String")]),n._v(" "),s("li",[s("code",[n._v("listener")]),n._v(" Function\n"),s("ul",[s("li",[s("code",[n._v("event")]),n._v(" IpcMainEvent")]),n._v(" "),s("li",[s("code",[n._v("...args")]),n._v(" any[]")])])])]),n._v(" "),s("p",[n._v("监听 channel, 当新消息到达，将通过 listener(event, args...) 调用 listener。")]),n._v(" "),s("h3",{attrs:{id:"ipcmain-once-channel-listener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ipcmain-once-channel-listener"}},[n._v("#")]),n._v(" "),s("code",[n._v("ipcMain.once(channel, listener)")])]),n._v(" "),s("ul",[s("li",[s("code",[n._v("channel")]),n._v(" String")]),n._v(" "),s("li",[s("code",[n._v("listener")]),n._v(" Function\n"),s("ul",[s("li",[s("code",[n._v("event")]),n._v(" IpcMainEvent")]),n._v(" "),s("li",[s("code",[n._v("...args")]),n._v(" any[]")])])])]),n._v(" "),s("p",[n._v("添加一次性 "),s("code",[n._v("listener")]),n._v(" 函数。 这个 "),s("code",[n._v("listener")]),n._v(" 只会在 "),s("code",[n._v("channel")]),n._v("下一次收到消息的时候被调用，之后这个监听器会被移除。")]),n._v(" "),s("h3",{attrs:{id:"ipcmain-removelistener-channel-listener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ipcmain-removelistener-channel-listener"}},[n._v("#")]),n._v(" "),s("code",[n._v("ipcMain.removeListener(channel, listener)")])]),n._v(" "),s("ul",[s("li",[s("code",[n._v("channel")]),n._v(" String")]),n._v(" "),s("li",[s("code",[n._v("listener")]),n._v(" Function\n"),s("ul",[s("li",[s("code",[n._v("...args")]),n._v(" any[]")])])])]),n._v(" "),s("p",[n._v("为特定的 channel 从监听队列中删除特定的 listener 监听者.")]),n._v(" "),s("h3",{attrs:{id:"ipcmain-removealllisteners-channel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ipcmain-removealllisteners-channel"}},[n._v("#")]),n._v(" "),s("code",[n._v("ipcMain.removeAllListeners([channel])")])]),n._v(" "),s("ul",[s("li",[s("code",[n._v("channel")]),n._v(" String (optional)")])]),n._v(" "),s("p",[n._v("移除所有指定 channel 的监听器； 若未指定 channel，则移除所有监听器。")]),n._v(" "),s("h3",{attrs:{id:"ipcmain-handle-channel-listener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ipcmain-handle-channel-listener"}},[n._v("#")]),n._v(" "),s("code",[n._v("ipcMain.handle(channel, listener)")])]),n._v(" "),s("ul",[s("li",[s("code",[n._v("channel")]),n._v(" String")]),n._v(" "),s("li",[s("code",[n._v("listener")]),n._v(" Function<Promise<void> | any>\n"),s("ul",[s("li",[s("code",[n._v("event")]),n._v(" IpcMainInvokeEvent")]),n._v(" "),s("li",[s("code",[n._v("...args")]),n._v(" any[]")])])])]),n._v(" "),s("p",[n._v("为一个 "),s("code",[n._v("invokeable")]),n._v("的IPC 添加一个handler。 每当一个渲染进程调用 "),s("code",[n._v("ipcRenderer.invoke(channel, ...args)")]),n._v(" 时这个处理器就会被调用。")]),n._v(" "),s("p",[n._v("如果 "),s("code",[n._v("listener")]),n._v(" 返回一个 Promise，那么 Promise 的最终结果就是远程调用的返回值。 否则， 监听器的返回值将被用来作为应答值。")]),n._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 主进程")]),n._v("\nipcMain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("handle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'my-invokable-ipc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("async")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("...")]),n._v("args")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=>")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("await")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("somePromise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("...")]),n._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" result\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 渲染进程")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("async")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=>")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("await")]),n._v(" ipcRenderer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("invoke")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'my-invokable-ipc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" arg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" arg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// ...")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("传递给处理器的第一个参数的 "),s("code",[n._v("event")]),n._v(" 与传递给常规事件侦听器的相同。 里面包含了哪些 WebContents 是调用请求的来源")]),n._v(" "),s("p",[n._v("通过"),s("code",[n._v("handle")]),n._v("在主线程抛出的异常并不易读，那是因为他们已经被序列化了。只有原始错误中的 "),s("code",[n._v("message")]),n._v(" 属性可提供给渲染进程。 详情请参阅 "),s("a",{attrs:{href:"https://github.com/electron/electron/issues/24427",target:"_blank",rel:"noopener noreferrer"}},[n._v("#24427"),s("OutboundLink")],1)]),n._v(" "),s("h3",{attrs:{id:"ipcmain-handleonce-channel-listener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ipcmain-handleonce-channel-listener"}},[n._v("#")]),n._v(" "),s("code",[n._v("ipcMain.handleOnce(channel, listener)")])]),n._v(" "),s("ul",[s("li",[s("code",[n._v("channel")]),n._v(" String")]),n._v(" "),s("li",[s("code",[n._v("listener")]),n._v(" Function<Promise<void> | any>\n"),s("ul",[s("li",[s("code",[n._v("event")]),n._v(" IpcMainInvokeEvent")]),n._v(" "),s("li",[s("code",[n._v("...args")]),n._v(" any[]")])])])]),n._v(" "),s("p",[n._v("处理单个 "),s("code",[n._v("invoke")]),n._v("able 可触发的 IPC 消息，然后移除侦听器。 详见 "),s("code",[n._v("ipcMain.handle(channel, listener)")])]),n._v(" "),s("h3",{attrs:{id:"ipcmain-removehandler-channel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ipcmain-removehandler-channel"}},[n._v("#")]),n._v(" "),s("code",[n._v("ipcMain.removeHandler(channel)")])]),n._v(" "),s("ul",[s("li",[s("code",[n._v("channel")]),n._v(" String")])]),n._v(" "),s("p",[n._v("移除 "),s("code",[n._v("channel")]),n._v("的所有处理程序，若存在。")]),n._v(" "),s("h2",{attrs:{id:"ipcmainevent-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ipcmainevent-object"}},[n._v("#")]),n._v(" IpcMainEvent object")]),n._v(" "),s("p",[s("code",[n._v("callback")]),n._v(" 的参数 "),s("code",[n._v("event")]),n._v(" 对象文档可以在 "),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/structures/ipc-main-event.html"}},[s("code",[n._v("ipc-main-event")])]),n._v(" 一节找到。")],1),n._v(" "),s("h2",{attrs:{id:"ipcmaininvokeevent-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ipcmaininvokeevent-object"}},[n._v("#")]),n._v(" IpcMainInvokeEvent object")]),n._v(" "),s("p",[s("code",[n._v("handle")]),n._v("回调参数"),s("code",[n._v("event")]),n._v("对象文档可以在"),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/structures/ipc-main-invoke-event.html"}},[s("code",[n._v("ipc-main-invoke-event")])]),n._v("一节找到")],1)])}),[],!1,null,null,null);t.default=e.exports}}]);