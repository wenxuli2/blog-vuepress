(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{528:function(n,e,t){"use strict";t.r(e);var s=t(20),a=Object(s.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h3",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[n._v("#")]),n._v(" 参考")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("[EXPRESS框架+FETCH/AXIOS.JS（本机实现跨域请求）](https://www.freesion.com/article/4564744523/)\n")])])]),n._v(" "),t("h2",{attrs:{id:"jsonp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[n._v("#")]),n._v(" jsonp")]),n._v(" "),t("h3",{attrs:{id:"原文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原文"}},[n._v("#")]),n._v(" 原文")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("[动态创建script标签解决跨域问题\n](https://www.cnblogs.com/rockyan/p/7987697.html)\n[异步<script>脚本及动态创建<script>实现 jsonp 跨域请求](https://www.jianshu.com/p/23232f79dcd5)\n[10 种跨域解决方案（附终极方案）](https://blog.csdn.net/blueblueskyhua/article/details/105506482?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-1-105506482.pc_agg_new_rank&utm_term=async%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&spm=1000.2123.3001.4430)\n")])])]),t("h3",{attrs:{id:"_1-异步加载-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步加载-js"}},[n._v("#")]),n._v(" 1.异步加载 js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('async\ndefer\n动态创建<script>标签\n    function addScriptTag(src){\n        var script = document.createElement(\'script\');\n        script.setAttribute("type","text/javascript");\n        script.src = src;\n        document.body.appendChild(script);\n    }\n    window.onload = function(){\n        addScriptTag("src/index.js");\n    }\n')])])]),t("h3",{attrs:{id:"jsonp的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsonp的原理"}},[n._v("#")]),n._v(" JSONP的原理")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("jsonp 是 json with padding (将json数据填充到函数中) 的缩写。\n请求返回的必须是合法的 JavaScript 代码，因此不能直接返 json 数据\n加载完会立即执行，在这里也就是请求返回的字符串中的 js 代码会立即执行\n")])])]),t("h2",{attrs:{id:"vue-config-axios"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-config-axios"}},[n._v("#")]),n._v(" vue + config + axios")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("// config\\index.js\n\tassetsSubDirectory: 'static',\n    assetsPublicPath: '/',\n    proxyTable: {\n      '/api': { // 匹配所有以 '/api'开头的请求路径\n        target: 'http://localhost:4000', // 代理目标的基础路径\n        changeOrigin: true, // 支持跨域\n        pathRewrite: {// 重写路径: 去掉路径中开头的'/api'\n          '^/api': ''\n        }\n      }\n    },\n// src\\api\\index.js\n\timport ajax from './ajax'\n\t// const BASE_URL = 'http://localhost:4000'\n\tconst BASE_URL = '/api'\n")])])]),t("h2",{attrs:{id:"express-fetch-axios-本机实现跨域请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#express-fetch-axios-本机实现跨域请求"}},[n._v("#")]),n._v(" express + fetch / axios （本机实现跨域请求）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("server.js\n    const express = require('express')\n    const bodyParser = require(\"body-parser\")\n    // const cors = require(\"cors\"); // 导入cors 中间件，详情看github\n    // app.use(cors({credentials: true, origin: 'http://localhost:5500'}));\n    const app = express()\n    // 处理静态资源\n    // app.use(express.static('public'))\n    // 处理参数\n    app.use(bodyParser.json());\n    // app.use(bodyParser.urlencoded({\n    //     extended:false\n    // }))\n\n    const port = 3000\n\n    //本地服务器解决跨域，不可缺\n    app.all('*', function (req, res, next) {\n        res.header('Access-Control-Allow-Origin', '*');\n        //Access-Control-Allow-Headers ,可根据浏览器的F12查看,把对应的粘贴在这里就行\n        res.header('Access-Control-Allow-Headers', 'Content-Type');\n        res.header('Access-Control-Allow-Methods', '*');\n        res.header('Content-Type', 'application/json;charset=utf-8');\n        next();\n    });\n\n    // promise\n    app.get('/pdata', (req, res) => {\n        res.send('Hello promise!')\n    })\n    // fetch\n    app.get('/fdata', (req, res) => {\n        res.send('Hello Fetch!')\n    })\n\n    app.get('/json', (req, res) => {\n        res.send({\n            'uname':'张三',\n            'age':18\n        })\n    })\n\n    // axios\n    app.get('/adata', (req, res) => {\n        // res.header(\"Access-Control-Allow-Origin\", \"*\");\n        // res.header('Access-Control-Allow-Origin', 'http://localhost:5500')\n        res.send('Hello axios!')\n    })\n\n    app.listen(port, () => {\n        console.log(`Example app listening on port http://localhost:${port}`)\n    })\nindex.html\n    <script>\n        fetch('http://localhost:3000/fdata').then(function (data) {\n            // text()方法属于fetchAPI的一部分，它返回一个Promise实例对象，用于获取后台返回的数据\n            return data.text();\n        }).then(function (data) {\n            console.log(data);\n        })\n    <\/script>\n    <script>\n        fetch('http://localhost:3000/json').then(function (data) {\n            // return data.json();\n            return data.text();\n        }).then(function (data) {\n            console.log(typeof data);\n            console.log(data);\n            // var obj = JSON.parse(data); //将string转换成对象\n            // // console.log(obj.uname, obj.age, obj.gender)\n            // console.log(obj);\n        })\n    <\/script>\n\n    \x3c!-- axiox --\x3e\n    <script src=\"https://unpkg.com/axios/dist/axios.min.js\"><\/script>\n    <script src='./js/axios.js'><\/script>\n    <script>\n        // axios.defaults.withCredentials=true\n        // axios.defaults.crossDomain=true\n        // axios.defaults.headers.get['Content-Type'] = 'application/x-www-form-urlencoded'\n        // headers: {'Content-Type': 'application/x-www-form-urlencoded',\"Access-Control-Allow-Origin\":'*'}\n        // 为给定 ID 的 user 创建请求\n        // 允许跨域\n        // axios.defaults.withCredentials=true // 允许携带cookie\n        // axios.defaults.withCredentials = true\n        // axios.defaults.crossDomain=true\n        axios.get('http://localhost:3000/adata')\n        .then(function (response) {\n            console.log(response.data);\n        })\n        // .catch(function (error) {\n        //     console.log(error);\n        // });\n    <\/script>\n")])])]),t("h3",{attrs:{id:"出现的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#出现的问题"}},[n._v("#")]),n._v(" 出现的问题")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('[1.DevTools failed to parse SourceMap 警告解决方法](https://blog.csdn.net/whuhewei/article/details/105565746)\n方案一：浏览器禁用sourcemap功能\n[...]-[setting]-[取消勾选Enable JavaScript source maps]\n方案二：配置webpack\n在webpack.config.js中添加devtool: "inline-source-map"\n    const path = require("path");\n    const HtmlWebpackPlugin = require("html-webpack-plugin");\n    const htmlPlugin = new HtmlWebpackPlugin({\n        template: path.join(__dirname, "./src/index.html"),\n        filename: "index.html"\n    });\n\n    module.exports = {\n        mode: "development",\n        // mode: "production"\n        plugins: [\n            htmlPlugin\n        ],\n        module: {\n            rules: [\n                {\n                    test: /\\.js|jsx$/,\n                    use: "babel-loader",\n                    exclude: /node_modules/\n                }\n            ]\n        },\n        devtool: "inline-source-map"\n    };')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);