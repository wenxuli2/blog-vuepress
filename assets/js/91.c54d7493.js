(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{568:function(t,s,n){"use strict";n.r(s);var a=n(20),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"netlog"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#netlog"}},[t._v("#")]),t._v(" netLog")]),t._v(" "),n("blockquote",[n("p",[t._v("Logging network events for a session.")])]),t._v(" "),n("p",[t._v("进程："),n("RouterLink",{attrs:{to:"/《Electron中文文档》/glossary.html#main-process"}},[t._v("主进程")])],1),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" netLog "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'electron'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\napp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("whenReady")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" netLog"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("startLogging")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path/to/net-log'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// After some network events")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" path "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" netLog"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("stopLogging")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Net-logs written to'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("p",[t._v("查看 "),n("RouterLink",{attrs:{to:"/《Electron中文文档》/api/command-line-switches.html#--log-net-logpath"}},[n("code",[t._v("--log-net-log")])]),t._v(" 记录应用生命周期的网络事件。")],1),t._v(" "),n("p",[t._v("** 注意: **除了指定的方法, 其他方法只能在 "),n("code",[t._v("app")]),t._v(" 模块的 "),n("code",[t._v("ready")]),t._v(" 事件被触发后使用。")]),t._v(" "),n("h2",{attrs:{id:"方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),n("h3",{attrs:{id:"netlog-startlogging-path-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#netlog-startlogging-path-options"}},[t._v("#")]),t._v(" "),n("code",[t._v("netLog.startLogging(path[, options])")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("path")]),t._v(" String - 记录网络日志的文件路径。")]),t._v(" "),n("li",[n("code",[t._v("options")]),t._v(" Object (可选)\n"),n("ul",[n("li",[n("code",[t._v("captureMode")]),t._v(" String (optional) - What kinds of data should be captured. By default, only metadata about requests will be captured. Setting this to "),n("code",[t._v("includeSensitive")]),t._v(" will include cookies and authentication data. Setting it to "),n("code",[t._v("everything")]),t._v(" will include all bytes transferred on sockets. Can be "),n("code",[t._v("default")]),t._v(", "),n("code",[t._v("includeSensitive")]),t._v(" or "),n("code",[t._v("everything")]),t._v(".")]),t._v(" "),n("li",[n("code",[t._v("maxFileSize")]),t._v(" Number (optional) - When the log grows beyond this size, logging will automatically stop. Defaults to unlimited.")])])])]),t._v(" "),n("p",[t._v("Returns "),n("code",[t._v("Promise<void>")]),t._v(" - resolves when the net log has begun recording.")]),t._v(" "),n("p",[t._v("开始记录网络事件日志到 "),n("code",[t._v("path")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"netlog-stoplogging"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#netlog-stoplogging"}},[t._v("#")]),t._v(" "),n("code",[t._v("netLog.stopLogging()")])]),t._v(" "),n("p",[t._v("Returns "),n("code",[t._v("Promise<void>")]),t._v(" - resolves when the net log has been flushed to disk.")]),t._v(" "),n("p",[t._v("停止网络事件日志的记录。 如果未被调用，net 记录将自动结束当 app 退出的时候。")]),t._v(" "),n("h2",{attrs:{id:"属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),n("h3",{attrs:{id:"netlog-currentlylogging-只读"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#netlog-currentlylogging-只读"}},[t._v("#")]),t._v(" "),n("code",[t._v("netLog.currentlyLogging")]),t._v(" "),n("em",[t._v("只读")])]),t._v(" "),n("p",[t._v("A "),n("code",[t._v("Boolean")]),t._v(" property that indicates whether network logs are currently being recorded.")])])}),[],!1,null,null,null);s.default=e.exports}}]);