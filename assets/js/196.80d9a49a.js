(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{674:function(t,e,a){"use strict";a.r(e);var o=a(20),r=Object(o.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"在-c-代码中使用-clang-format-工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-c-代码中使用-clang-format-工具"}},[t._v("#")]),t._v(" 在 C++ 代码中使用 clang-format 工具")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://clang.llvm.org/docs/ClangFormat.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("clang-format")]),a("OutboundLink")],1),t._v("是一个自动格式化 C/C++/Objective-C 代码的工具, 可以让开发人员不需要担心代码审查期间的样式问题.")]),t._v(" "),a("p",[t._v("强烈建议在发起请求之前格式化已更改的 C++ 代码，这将节省您和审阅者的时间.")]),t._v(" "),a("p",[t._v("你可以通过 "),a("code",[t._v("npm install -g clang-format")]),t._v(" 安装 "),a("code",[t._v("clang-format")]),t._v(" 和 "),a("code",[t._v("git-clang-format")]),t._v(".")]),t._v(" "),a("p",[t._v("To automatically format a file according to Electron C++ code style, run "),a("code",[t._v("clang-format -i path/to/electron/file.cc")]),t._v(". It should work on macOS/Linux/Windows.")]),t._v(" "),a("p",[t._v("格式化已更改代码的工作流:")]),t._v(" "),a("ol",[a("li",[t._v("在 Electron 存储库中更改代码.")]),t._v(" "),a("li",[t._v("运行 "),a("code",[t._v("git add your_changed_file.cc")]),t._v(".")]),t._v(" "),a("li",[t._v("运行 "),a("code",[t._v("git-clang-format")]),t._v(", 然后你将可能会看到修改后的 "),a("code",[t._v("your_changed_file.cc")]),t._v(", 这些修改是从 "),a("code",[t._v("clang-format")]),t._v(" 生成的.")]),t._v(" "),a("li",[t._v("运行 "),a("code",[t._v("git add your_changed_file.cc")]),t._v(", 并提交你的修改.")]),t._v(" "),a("li",[t._v("现在准备好的分支推送请求已经被打开.")])]),t._v(" "),a("p",[t._v("If you want to format the changed code on your latest git commit (HEAD), you can run "),a("code",[t._v("git-clang-format HEAD~1")]),t._v(". See "),a("code",[t._v("git-clang-format -h")]),t._v(" for more details.")]),t._v(" "),a("h2",{attrs:{id:"编辑器集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编辑器集成"}},[t._v("#")]),t._v(" 编辑器集成")]),t._v(" "),a("p",[t._v("You can also integrate "),a("code",[t._v("clang-format")]),t._v(" directly into your favorite editors. For further guidance on setting up editor integration, see these pages:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://atom.io/packages/clang-format",target:"_blank",rel:"noopener noreferrer"}},[t._v("Atom"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://clang.llvm.org/docs/ClangFormat.html#vim-integration",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vim & Emacs"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=xaver.clang-format",target:"_blank",rel:"noopener noreferrer"}},[t._v("Visual Studio Code"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);