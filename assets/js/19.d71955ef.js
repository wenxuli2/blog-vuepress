(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{495:function(e,n,t){"use strict";t.r(n);var a=t(20),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。\n参考\n[axios中文文档|axios中文网](http://axios-js.com/zh-cn/docs/index.html)\n")])])]),t("h3",{attrs:{id:"特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[e._v("#")]),e._v(" 特性")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("从浏览器中创建 XMLHttpRequests\n从 node.js 创建 http 请求\n支持 Promise API\n拦截请求和响应\n转换请求数据和响应数据\n取消请求\n自动转换 JSON 数据\n客户端支持防御 XSRF\n")])])]),t("h3",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('npm i axios --save\ncdn:<script src="https://unpkg.com/axios/dist/axios.min.js"><\/script>\n')])])]),t("h3",{attrs:{id:"案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[e._v("#")]),e._v(" 案例")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("简单get请求\nconst axios = require('axios');\nconst url = 'https://www.baidu.com/'\naxios.get(url)\n.then(function (response) {\n    // console.log(response);\n    // console.log(response.data); // `data` 由服务器提供的响应\n    // console.log(response.status); // `status` 来自服务器响应的 HTTP 状态码\n    // console.log(response.statusText); // `statusText` 来自服务器响应的 HTTP 状态信息\n    // console.log(response.headers); // `headers` 服务器响应的头\n    // console.log(response.config); // `config` 是为请求提供的配置信息\n    console.log(response.request); // `request` \n})\n.catch(function (error) {\nconsole.log(error);\n});\n")])])]),t("h3",{attrs:{id:"简单封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单封装"}},[e._v("#")]),e._v(" 简单封装")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("import axios from 'axios'\nexport default function ajax (url, data={}, type='GET') {\n    return new Promise(function (resolve, reject) {\n    // 执行异步ajax请求\n    let promise\n    if (type === 'GET') {\n        // 准备url query参数数据\n        let dataStr = '' //数据拼接字符串\n        Object.keys(data).forEach(key => {\n        dataStr += key + '=' + data[key] + '&'\n        })\n        if (dataStr !== '') {\n        dataStr = dataStr.substring(0, dataStr.lastIndexOf('&'))\n        url = url + '?' + dataStr\n        }\n        // 发送get请求\n        promise = axios.get(url)\n    } else {\n        // 发送post请求\n        promise = axios.post(url, data)\n    }\n    promise.then(function (response) {\n        // 成功了调用resolve()\n        resolve(response.data)\n    }).catch(function (error) {\n        //失败了调用reject()\n        reject(error)\n    })\n    })\n}\n执行多个并发请求axios.all\nfunction getUserAccount() {\n    return axios.get('/user/12345');\n}\nfunction getUserPermissions() {\nreturn axios.get('/user/12345/permissions');\n}\n\n\naxios.all([getUserAccount(),    getUserPermissions()])\n.then(axios.spread(function (acct, perms) {\n// 两个请求现在都执行完成\n}));\n")])])]),t("h4",{attrs:{id:"axios-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#axios-api"}},[e._v("#")]),e._v(" axios API")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// 发送 POST 请求\naxios({\nmethod: 'post',\nurl: '/user/12345',\ndata: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n}\n});\n")])])]),t("h4",{attrs:{id:"获取远端图片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取远端图片"}},[e._v("#")]),e._v(" 获取远端图片")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("axios({\nmethod:'get',\nurl:'http://bit.ly/2mTM3nY',\nresponseType:'stream'\n})\n.then(function(response) {\nresponse.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n});\n")])])]),t("h3",{attrs:{id:"请求方法的别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求方法的别名"}},[e._v("#")]),e._v(" 请求方法的别名")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("axios.request(config)\naxios.get(url[, config])\naxios.delete(url[, config])\naxios.head(url[, config])\naxios.options(url[, config])\naxios.post(url[, data[, config]])\naxios.put(url[, data[, config]])\naxios.patch(url[, data[, config]])\n创建实例\nconst instance = axios.create({\n    baseURL: 'https://some-domain.com/api/',\n    timeout: 1000,\n    headers: {'X-Custom-Header': 'foobar'}\n});\n")])])]),t("h3",{attrs:{id:"实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("axios#request(config)\naxios#get(url[, config])\naxios#delete(url[, config])\naxios#head(url[, config])\naxios#options(url[, config])\naxios#post(url[, data[, config]])\naxios#put(url[, data[, config]])\naxios#patch(url[, data[, config]])\n")])])]),t("h3",{attrs:{id:"请求配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求配置"}},[e._v("#")]),e._v(" 请求配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// `url` 是用于请求的服务器 URL\n// `method` 是创建请求时使用的方法\n// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。\n// `transformRequest` 允许在向服务器发送前，修改请求数据\n// `transformResponse` 在传递给 then/catch 前，允许修改响应数据\n// `headers` 是即将被发送的自定义请求头\n// `params` 是即将与请求一起发送的 URL 参数\n// `paramsSerializer` 是一个负责 `params` 序列化的函数\n// `data` 是作为请求主体被发送的数据\n// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)\n// `withCredentials` 表示跨域请求时是否需要使用凭证\n// `adapter` 允许自定义处理请求，以使测试更轻松\n// `auth` 表示应该使用 HTTP 基础验证，并提供凭据\n// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n// `responseEncoding` indicates encoding to use for decoding responses\n// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称\n// `onUploadProgress` 允许为上传处理进度事件\n// `onDownloadProgress` 允许为下载处理进度事件\n// `maxContentLength` 定义允许的响应内容的最大尺寸\n// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte\n// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目\n// `socketPath` defines a UNIX Socket to be used in node.js.\n// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：\n// `keepAlive` 默认没有启用\n// 'proxy' 定义代理服务器的主机名称和端口\n// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n// `cancelToken` 指定用于取消请求的 cancel token\n具体\n    {\n    // `url` 是用于请求的服务器 URL\n    url: '/user',\n// `method` 是创建请求时使用的方法\nmethod: 'get', // default\n\n// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。\n// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL\nbaseURL: 'https://some-domain.com/api/',\n\n// `transformRequest` 允许在向服务器发送前，修改请求数据\n// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法\n// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream\ntransformRequest: [function (data, headers) {\n    // 对 data 进行任意转换处理\n    return data;\n}],\n\n// `transformResponse` 在传递给 then/catch 前，允许修改响应数据\ntransformResponse: [function (data) {\n    // 对 data 进行任意转换处理\n    return data;\n}],\n\n// `headers` 是即将被发送的自定义请求头\nheaders: {'X-Requested-With': 'XMLHttpRequest'},\n\n// `params` 是即将与请求一起发送的 URL 参数\n// 必须是一个无格式对象(plain object)或 URLSearchParams 对象\nparams: {\n    ID: 12345\n},\n\n// `paramsSerializer` 是一个负责 `params` 序列化的函数\n// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\nparamsSerializer: function(params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n},\n\n// `data` 是作为请求主体被发送的数据\n// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n// 在没有设置 `transformRequest` 时，必须是以下类型之一：\n// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n// - 浏览器专属：FormData, File, Blob\n// - Node 专属： Stream\ndata: {\n    firstName: 'Fred'\n},\n\n// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)\n// 如果请求话费了超过 `timeout` 的时间，请求将被中断\ntimeout: 1000,\n\n// `withCredentials` 表示跨域请求时是否需要使用凭证\nwithCredentials: false, // default\n\n// `adapter` 允许自定义处理请求，以使测试更轻松\n// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).\nadapter: function (config) {\n    /* ... */\n},\n\n// `auth` 表示应该使用 HTTP 基础验证，并提供凭据\n// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头\nauth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n},\n\n// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\nresponseType: 'json', // default\n\n// `responseEncoding` indicates encoding to use for decoding responses\n// Note: Ignored for `responseType` of 'stream' or client-side requests\nresponseEncoding: 'utf8', // default\n\n// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称\nxsrfCookieName: 'XSRF-TOKEN', // default\n\n// `xsrfHeaderName` is the name of the http header that carries the xsrf token value\nxsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n// `onUploadProgress` 允许为上传处理进度事件\nonUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n},\n\n// `onDownloadProgress` 允许为下载处理进度事件\nonDownloadProgress: function (progressEvent) {\n    // 对原生进度事件的处理\n},\n\n// `maxContentLength` 定义允许的响应内容的最大尺寸\nmaxContentLength: 2000,\n\n// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte\nvalidateStatus: function (status) {\n    return status &gt;= 200 &amp;&amp; status &lt; 300; // default\n},\n\n// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目\n// 如果设置为0，将不会 follow 任何重定向\nmaxRedirects: 5, // default\n\n// `socketPath` defines a UNIX Socket to be used in node.js.\n// e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n// Only either `socketPath` or `proxy` can be specified.\n// If both are specified, `socketPath` is used.\nsocketPath: null, // default\n\n// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：\n// `keepAlive` 默认没有启用\nhttpAgent: new http.Agent({ keepAlive: true }),\nhttpsAgent: new https.Agent({ keepAlive: true }),\n\n// 'proxy' 定义代理服务器的主机名称和端口\n// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\nproxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n    username: 'mikeymike',\n    password: 'rapunz3l'\n    }\n},\n\n// `cancelToken` 指定用于取消请求的 cancel token\n// （查看后面的 Cancellation 这节了解更多）\ncancelToken: new CancelToken(function (cancel) {\n})\n}\n")])])]),t("p",[e._v("响应结构\n// "),t("code",[e._v("data")]),e._v(" 由服务器提供的响应\n// "),t("code",[e._v("status")]),e._v(" 来自服务器响应的 HTTP 状态码\n// "),t("code",[e._v("statusText")]),e._v(" 来自服务器响应的 HTTP 状态信息\n// "),t("code",[e._v("headers")]),e._v(" 服务器响应的头\n// "),t("code",[e._v("config")]),e._v(" 是为请求提供的配置信息\n// 'request'\n{\n// data 由服务器提供的响应\ndata: {},")]),e._v(" "),t("p",[e._v("// status 来自服务器响应的 HTTP 状态码\nstatus: 200,")]),e._v(" "),t("p",[e._v("// statusText 来自服务器响应的 HTTP 状态信息\nstatusText: 'OK',")]),e._v(" "),t("p",[e._v("// headers 服务器响应的头\nheaders: {},")]),e._v(" "),t("p",[e._v("// config 是为请求提供的配置信息\nconfig: {},\n// 'request'\n// request is the request that generated this response\n// It is the last ClientRequest instance in node.js (in redirects)\n// and an XMLHttpRequest instance the browser\nrequest: {}\n}")])])}),[],!1,null,null,null);n.default=s.exports}}]);