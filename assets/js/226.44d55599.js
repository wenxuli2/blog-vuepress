(window.webpackJsonp=window.webpackJsonp||[]).push([[226],{704:function(e,t,s){"use strict";s.r(t);var a=s(20),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"device-access"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#device-access"}},[e._v("#")]),e._v(" Device Access")]),e._v(" "),s("p",[e._v("Like Chromium based browsers, Electron provides access to device hardware through web APIs.  For the most part these APIs work like they do in a browser, but there are some differences that need to be taken into account.  The primary difference between Electron and browsers is what happens when device access is requested.  In a browser, users are presented with a popup where they can grant access to an individual device.  In Electron APIs are provided which can be used by a developer to either automatically pick a device or prompt users to pick a device via a developer created interface.")]),e._v(" "),s("h2",{attrs:{id:"web-bluetooth-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web-bluetooth-api"}},[e._v("#")]),e._v(" Web Bluetooth API")]),e._v(" "),s("p",[e._v("The "),s("a",{attrs:{href:"https://web.dev/bluetooth/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Web Bluetooth API"),s("OutboundLink")],1),e._v(" can be used to communicate with bluetooth devices. In order to use this API in Electron, developers will need to handle the "),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/web-contents.html#event-select-bluetooth-device"}},[s("code",[e._v("select-bluetooth-device")]),e._v(" event on the webContents")]),e._v(" associated with the device request.")],1),e._v(" "),s("h3",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),s("p",[e._v("This example demonstrates an Electron application that automatically selects the first available bluetooth device when the "),s("code",[e._v("Test Bluetooth")]),e._v(" button is clicked.")]),e._v(" "),s("div",{staticClass:"language-javascript fiddle='docs/fiddles/features/web-bluetooth' line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"webhid-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webhid-api"}},[e._v("#")]),e._v(" WebHID API")]),e._v(" "),s("p",[e._v("The "),s("a",{attrs:{href:"https://web.dev/hid/",target:"_blank",rel:"noopener noreferrer"}},[e._v("WebHID API"),s("OutboundLink")],1),e._v(" can be used to access HID devices such as keyboards and gamepads.  Electron provides several APIs for working with the WebHID API:")]),e._v(" "),s("ul",[s("li",[e._v("The "),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/session.html#event-select-hid-device"}},[s("code",[e._v("select-hid-device")]),e._v(" event on the Session")]),e._v(" can be used to select a HID device when a call to "),s("code",[e._v("navigator.hid.requestDevice")]),e._v(" is made.  Additionally the "),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/session.html#event-hid-device-added"}},[s("code",[e._v("hid-device-added")])]),e._v(" and "),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/session.html#event-hid-device-removed"}},[s("code",[e._v("hid-device-removed")])]),e._v(" events on the Session can be used to handle devices being plugged in or unplugged during the "),s("code",[e._v("navigator.hid.requestDevice")]),e._v(" process.")],1),e._v(" "),s("li",[s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/session.html#sessetdevicepermissionhandlerhandler"}},[s("code",[e._v("ses.setDevicePermissionHandler(handler)")])]),e._v(" can be used to provide default permissioning to devices without first calling for permission to devices via "),s("code",[e._v("navigator.hid.requestDevice")]),e._v(".  Additionally, the default behavior of Electron is to store granted device permision through the lifetime of the corresponding WebContents.  If longer term storage is needed, a developer can store granted device permissions (eg when handling the "),s("code",[e._v("select-hid-device")]),e._v(" event) and then read from that storage with "),s("code",[e._v("setDevicePermissionHandler")]),e._v(".")],1),e._v(" "),s("li",[s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/session.html#sessetpermissioncheckhandlerhandler"}},[s("code",[e._v("ses.setPermissionCheckHandler(handler)")])]),e._v(" can be used to disable HID access for specific origins.")],1)]),e._v(" "),s("h3",{attrs:{id:"blocklist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#blocklist"}},[e._v("#")]),e._v(" Blocklist")]),e._v(" "),s("p",[e._v("By default Electron employs the same "),s("a",{attrs:{href:"https://github.com/WICG/webhid/blob/main/blocklist.txt",target:"_blank",rel:"noopener noreferrer"}},[e._v("blocklist"),s("OutboundLink")],1),e._v(" used by Chromium.  If you wish to override this behavior, you can do so by setting the "),s("code",[e._v("disable-hid-blocklist")]),e._v(" flag:")]),e._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[e._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("commandLine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("appendSwitch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'disable-hid-blocklist'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"示例-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),s("p",[e._v("This example demonstrates an Electron application that automatically selects HID devices through "),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/session.html#sessetdevicepermissionhandlerhandler"}},[s("code",[e._v("ses.setDevicePermissionHandler(handler)")])]),e._v(" and through "),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/session.html#event-select-hid-device"}},[s("code",[e._v("select-hid-device")]),e._v(" event on the Session")]),e._v(" when the "),s("code",[e._v("Test WebHID")]),e._v(" button is clicked.")],1),e._v(" "),s("div",{staticClass:"language-javascript fiddle='docs/fiddles/features/web-hid' line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"web-serial-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web-serial-api"}},[e._v("#")]),e._v(" Web Serial API")]),e._v(" "),s("p",[e._v("The "),s("a",{attrs:{href:"https://web.dev/serial/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Web Serial API"),s("OutboundLink")],1),e._v(" can be used to access serial devices that are connected via serial port, USB, or Bluetooth.  In order to use this API in Electron, developers will need to handle the "),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/session.html#event-select-serial-port"}},[s("code",[e._v("select-serial-port")]),e._v(" event on the Session")]),e._v(" associated with the serial port request.")],1),e._v(" "),s("p",[e._v("There are several additional APIs for working with the Web Serial API:")]),e._v(" "),s("ul",[s("li",[e._v("The "),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/session.html#event-serial-port-added"}},[s("code",[e._v("serial-port-added")])]),e._v(" and "),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/session.html#event-serial-port-removed"}},[s("code",[e._v("serial-port-removed")])]),e._v(" events on the Session can be used to handle devices being plugged in or unplugged during the "),s("code",[e._v("navigator.serial.requestPort")]),e._v(" process.")],1),e._v(" "),s("li",[s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/session.html#sessetpermissioncheckhandlerhandler"}},[s("code",[e._v("ses.setPermissionCheckHandler(handler)")])]),e._v(" can be used to disable serial access for specific origins.")],1)]),e._v(" "),s("h3",{attrs:{id:"示例-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例-3"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),s("p",[e._v("This example demonstrates an Electron application that automatically selects the first available Arduino Uno serial device (if connected) through "),s("RouterLink",{attrs:{to:"/《Electron中文文档》/api/session.html#event-select-serial-port"}},[s("code",[e._v("select-serial-port")]),e._v(" event on the Session")]),e._v(" when the "),s("code",[e._v("Test Web Serial")]),e._v(" button is clicked.")],1),e._v(" "),s("div",{staticClass:"language-javascript fiddle='docs/fiddles/features/web-serial' line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);