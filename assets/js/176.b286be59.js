(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{654:function(e,t,o){"use strict";o.r(t);var n=o(20),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"类-touchbarsegmentedcontrol"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#类-touchbarsegmentedcontrol"}},[e._v("#")]),e._v(" 类: TouchBarSegmentedControl")]),e._v(" "),o("blockquote",[o("p",[e._v("创建一个分段控件（按钮组），其中一个按钮具有选定状态")])]),e._v(" "),o("p",[e._v("Process: "),o("RouterLink",{attrs:{to:"/《Electron中文文档》/glossary.html#main-process"}},[e._v("Main")]),o("br"),e._v(" "),o("em",[e._v("This class is not exported from the "),o("code",[e._v("'electron'")]),e._v(" module. It is only available as a return value of other methods in the Electron API.")])],1),e._v(" "),o("h3",{attrs:{id:"new-touchbarsegmentedcontrol-options"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#new-touchbarsegmentedcontrol-options"}},[e._v("#")]),e._v(" "),o("code",[e._v("new TouchBarSegmentedControl(options)")])]),e._v(" "),o("ul",[o("li",[o("code",[e._v("选项")]),e._v(" 对象\n"),o("ul",[o("li",[o("code",[e._v("segmentStyle")]),e._v(" String (optional) - Style of the segments:\n"),o("ul",[o("li",[o("code",[e._v("automatic")]),e._v(" - Default. The appearance of the segmented control is automatically determined based on the type of window in which the control is displayed and the position within the window. Maps to "),o("code",[e._v("NSSegmentStyleAutomatic")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("rounded")]),e._v(" - 控件的呈现使用圆形风格。 Maps to "),o("code",[e._v("NSSegmentStyleRounded")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("textured-rounded")]),e._v(" - 控件的呈现使用纹理圆形风格。 Maps to "),o("code",[e._v("NSSegmentStyleTexturedRounded")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("round-rect")]),e._v(" - 以圆角矩形样式显示控件。 Maps to "),o("code",[e._v("NSSegmentStyleRoundRect")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("round-rect")]),e._v(" - 以带纹理的矩形样式显示控件。 Maps to "),o("code",[e._v("NSSegmentStyleTexturedSquare")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("capsule")]),e._v(" - 以胶囊样式的风格显示控件 Maps to "),o("code",[e._v("NSSegmentStyleCapsule")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("small-square")]),e._v(" - 以小尺寸的矩形样式显示控件 Maps to "),o("code",[e._v("NSSegmentStyleSmallSquare")]),e._v(".")]),e._v(" "),o("li",[e._v("表示控件的当前段样式。更新此值会立即更新触摸栏中的控件。 Maps to "),o("code",[e._v("NSSegmentStyleSeparated")]),e._v(".")])])]),e._v(" "),o("li",[o("code",[e._v("mode")]),e._v(" String (optional) - The selection mode of the control:\n"),o("ul",[o("li",[o("code",[e._v("single")]),e._v(" - Default. One item selected at a time, selecting one deselects the previously selected item. Maps to "),o("code",[e._v("NSSegmentSwitchTrackingSelectOne")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("multiple")]),e._v(" - 可以选多个项。 Maps to "),o("code",[e._v("NSSegmentSwitchTrackingSelectAny")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("buttons")]),e._v(" - 将段作为按钮使用, 每一段都可以被按下和释放但是不会被标记为激活状态 Maps to "),o("code",[e._v("NSSegmentSwitchTrackingMomentary")]),e._v(".")])])]),e._v(" "),o("li",[o("code",[e._v("segments")]),e._v(" "),o("RouterLink",{attrs:{to:"/《Electron中文文档》/api/structures/segmented-control-segment.html"}},[e._v("SegmentedControlSegment[]")]),e._v(" - 被放到控件中的段的集合")],1),e._v(" "),o("li",[o("code",[e._v("selectedIndex")]),e._v(" Integer (optional) - 当前选中的段的下标, 这个值会在用户交互时自动更改 When the mode is "),o("code",[e._v("multiple")]),e._v(" it will be the last selected item.")]),e._v(" "),o("li",[o("code",[e._v("change")]),e._v(" Function (optional) - Called when the user selects a new segment.\n"),o("ul",[o("li",[o("code",[e._v("selectedIndex")]),e._v(" Integer - 用户选中的段的下标。")]),e._v(" "),o("li",[o("code",[e._v("isSelected")]),e._v(" Boolean - 当前段的选中状态")])])])])])]),e._v(" "),o("h3",{attrs:{id:"实例属性"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[e._v("#")]),e._v(" 实例属性")]),e._v(" "),o("p",[e._v("以下为 "),o("code",[e._v("TouchBarSegmentedControl")]),e._v(" 实例的可用属性:")]),e._v(" "),o("h4",{attrs:{id:"touchbarsegmentedcontrol-segmentstyle"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#touchbarsegmentedcontrol-segmentstyle"}},[e._v("#")]),e._v(" "),o("code",[e._v("touchBarSegmentedControl.segmentStyle")])]),e._v(" "),o("p",[e._v("A "),o("code",[e._v("String")]),e._v(" representing the controls current segment style. Updating this value immediately updates the control in the touch bar.")]),e._v(" "),o("h4",{attrs:{id:"touchbarsegmentedcontrol-segments"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#touchbarsegmentedcontrol-segments"}},[e._v("#")]),e._v(" "),o("code",[e._v("touchBarSegmentedControl.segments")])]),e._v(" "),o("p",[o("code",[e._v("SegmentedControlSegment[]")]),e._v("类型表示的控件中段的集合 改变这个值会立刻刷新touch bar内的控件。 然而改变数组某元素内的嵌套属性"),o("strong",[e._v("不会刷新touch bar")]),e._v("。")]),e._v(" "),o("h4",{attrs:{id:"touchbarsegmentedcontrol-selectedindex"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#touchbarsegmentedcontrol-selectedindex"}},[e._v("#")]),e._v(" "),o("code",[e._v("touchBarSegmentedControl.selectedIndex")])]),e._v(" "),o("p",[o("code",[e._v("Integer")]),e._v("类型表示的当前选中段 改变这个值会立即触发更新当前段 用户对触摸条的操作会自动更新这个值")]),e._v(" "),o("h4",{attrs:{id:"touchbarsegmentedcontrol-mode"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#touchbarsegmentedcontrol-mode"}},[e._v("#")]),e._v(" "),o("code",[e._v("touchBarSegmentedControl.mode")])]),e._v(" "),o("p",[e._v("A "),o("code",[e._v("String")]),e._v(" representing the current selection mode of the control.  Can be "),o("code",[e._v("single")]),e._v(", "),o("code",[e._v("multiple")]),e._v(" or "),o("code",[e._v("buttons")]),e._v(".")])])}),[],!1,null,null,null);t.default=r.exports}}]);