(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{675:function(e,t,o){"use strict";o.r(t);var i=o(20),n=Object(i.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"在-c-代码中使用clang-tidy"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#在-c-代码中使用clang-tidy"}},[e._v("#")]),e._v(" 在 C++ 代码中使用clang-tidy")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://clang.llvm.org/extra/clang-tidy/",target:"_blank",rel:"noopener noreferrer"}},[o("code",[e._v("叮当")]),o("OutboundLink")],1),e._v(" 是自动检查 C/C++/Objective-C 代码的样式冲突、编程 错误和最佳实践的工具。")]),e._v(" "),o("p",[e._v("Electron's "),o("code",[e._v("clang-tidy")]),e._v(" integration is provided as a linter script which can be run with "),o("code",[e._v("npm run lint:clang-tidy")]),e._v(". While "),o("code",[e._v("clang-tidy")]),e._v(" checks your on-disk files, you need to have built Electron so that it knows which compiler flags were used. There is one required option for the script "),o("code",[e._v("--output-dir")]),e._v(", which tells the script which build directory to pull the compilation information from. A typical usage would be: "),o("code",[e._v("npm run lint:clang-tidy --out-dir ../out/Testing")])]),e._v(" "),o("p",[e._v("With no filenames provided, all C/C++/Objective-C files will be checked. 您可以提供要检查的文件列表，在 选项后通过文件名： "),o("code",[e._v("npm 运行行：clang-tidy --out-dir 。 /out/测试shell/browser/api/electron_api_app.cc")])]),e._v(" "),o("p",[e._v("While "),o("code",[e._v("clang-tidy")]),e._v(" has a "),o("a",{attrs:{href:"https://clang.llvm.org/extra/clang-tidy/checks/list.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("long list"),o("OutboundLink")],1),e._v(" of possible checks, in Electron only a few are enabled by default. At the moment Electron doesn't have a "),o("code",[e._v(".clang-tidy")]),e._v(" config, so "),o("code",[e._v("clang-tidy")]),e._v(" will find the one from Chromium at "),o("code",[e._v("src/.clang-tidy")]),e._v(" and use the checks which Chromium has enabled. You can change which checks are run by using the "),o("code",[e._v("--checks=")]),e._v(" option. This is passed straight through to "),o("code",[e._v("clang-tidy")]),e._v(", so see its documentation for full details. Wildcards can be used, and checks can be disabled by prefixing a "),o("code",[e._v("-")]),e._v(". By default any checks listed are added to those in "),o("code",[e._v(".clang-tidy")]),e._v(", so if you'd like to limit the checks to specific ones you should first exclude all checks then add back what you want, like "),o("code",[e._v("--checks=-*,performance*")]),e._v(".")]),e._v(" "),o("p",[e._v("Running "),o("code",[e._v("clang-tidy")]),e._v(" is rather slow - internally it compiles each file and then runs the checks so it will always be some factor slower than compilation. While you can use parallel runs to speed it up using the "),o("code",[e._v("--jobs|-j")]),e._v(" option, "),o("code",[e._v("clang-tidy")]),e._v(" also uses a lot of memory during its checks, so it can easily run into out-of-memory errors. As such the default number of jobs is one.")])])}),[],!1,null,null,null);t.default=n.exports}}]);