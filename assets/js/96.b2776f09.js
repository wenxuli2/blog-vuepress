(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{573:function(e,s,t){"use strict";t.r(s);var r=t(20),o=Object(r.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"process"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process"}},[e._v("#")]),e._v(" process")]),e._v(" "),t("blockquote",[t("p",[e._v("处理对象的扩展")])]),e._v(" "),t("p",[e._v("进程： "),t("RouterLink",{attrs:{to:"/《Electron中文文档》/glossary.html#main-process"}},[e._v("Main")]),e._v(", "),t("RouterLink",{attrs:{to:"/《Electron中文文档》/glossary.html#renderer-process"}},[e._v("Renderer")])],1),e._v(" "),t("p",[e._v("Electron's "),t("code",[e._v("process")]),e._v(" 对象继承 "),t("a",{attrs:{href:"https://nodejs.org/api/process.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js "),t("code",[e._v("process")]),e._v(" object"),t("OutboundLink")],1),e._v("。 它新增了以下事件、属性和方法")]),e._v(" "),t("h2",{attrs:{id:"sandbox"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sandbox"}},[e._v("#")]),e._v(" Sandbox")]),e._v(" "),t("p",[e._v("在沙盒化的渲染进程中， "),t("code",[e._v("process")]),e._v(" 对象只包含了API的一个子集:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("crash()")])]),e._v(" "),t("li",[t("code",[e._v("hang()")])]),e._v(" "),t("li",[t("code",[e._v("getCreationTime()")])]),e._v(" "),t("li",[t("code",[e._v("getHeapStatistics()")])]),e._v(" "),t("li",[t("code",[e._v("getBlinkMemoryInfo()")])]),e._v(" "),t("li",[t("code",[e._v("getProcessMemoryInfo()")])]),e._v(" "),t("li",[t("code",[e._v("getSystemMemoryInfo()")])]),e._v(" "),t("li",[t("code",[e._v("getSystemVersion()")])]),e._v(" "),t("li",[t("code",[e._v("getCPUUsage()")])]),e._v(" "),t("li",[t("code",[e._v("getIOCounters()")])]),e._v(" "),t("li",[t("code",[e._v("uptime()")])]),e._v(" "),t("li",[t("code",[e._v("argv")])]),e._v(" "),t("li",[t("code",[e._v("execPath")])]),e._v(" "),t("li",[t("code",[e._v("env")])]),e._v(" "),t("li",[t("code",[e._v("pid")])]),e._v(" "),t("li",[t("code",[e._v("arch")])]),e._v(" "),t("li",[t("code",[e._v("platform")])]),e._v(" "),t("li",[t("code",[e._v("沙盒化")])]),e._v(" "),t("li",[t("code",[e._v("contextIsolated")])]),e._v(" "),t("li",[t("code",[e._v("type")])]),e._v(" "),t("li",[t("code",[e._v("version")])]),e._v(" "),t("li",[t("code",[e._v("versions")])]),e._v(" "),t("li",[t("code",[e._v("mas")])]),e._v(" "),t("li",[t("code",[e._v("windowsStore")])]),e._v(" "),t("li",[t("code",[e._v("contextId")])])]),e._v(" "),t("h2",{attrs:{id:"事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[e._v("#")]),e._v(" 事件")]),e._v(" "),t("h3",{attrs:{id:"事件-loaded"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件-loaded"}},[e._v("#")]),e._v(" 事件: 'loaded'")]),e._v(" "),t("p",[e._v("当Electron加载了它的内部初始化脚本并且是正要开始加载网页或主脚本时触发。")]),e._v(" "),t("h2",{attrs:{id:"属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[e._v("#")]),e._v(" 属性")]),e._v(" "),t("h3",{attrs:{id:"process-defaultapp-只读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-defaultapp-只读"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.defaultApp")]),e._v(" "),t("em",[e._v("只读")])]),e._v(" "),t("p",[e._v("一个 "),t("code",[e._v("Boolean")]),e._v("。 当应用程序启动时被作为参数传递给默认应用，这个属性在主进程中是"),t("code",[e._v("true")]),e._v("，否则是"),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"process-ismainframe-只读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-ismainframe-只读"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.isMainFrame")]),e._v(" "),t("em",[e._v("只读")])]),e._v(" "),t("p",[t("code",[e._v("Boolean")]),e._v('，若当前渲染器上下文是 渲染器"主"框架时为'),t("code",[e._v("true")]),e._v("。 如果你想得到当前框架的ID，你应该使用 "),t("code",[e._v("webFrame.routingId")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"process-mas-只读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-mas-只读"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.mas")]),e._v(" "),t("em",[e._v("只读")])]),e._v(" "),t("p",[e._v("一个 "),t("code",[e._v("Boolean")]),e._v("。 为Mac App Store 构建，该属性是 "),t("code",[e._v("true")]),e._v("，为其他构建则为"),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"process-noasar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-noasar"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.noAsar")])]),e._v(" "),t("p",[t("code",[e._v("Boolean")]),e._v(" 控制您应用程序内的 ASAR 支持。 设置为 "),t("code",[e._v("true")]),e._v("将会禁用Node内置模块中对 "),t("code",[e._v("asar")]),e._v(" 的支持。")]),e._v(" "),t("h3",{attrs:{id:"process-nodeprecation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-nodeprecation"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.noDeprecation")])]),e._v(" "),t("p",[t("code",[e._v("Boolean")]),e._v(" 类型，用于控制弃用警告是否被打印到"),t("code",[e._v("stderr")]),e._v("。 将其设置为"),t("code",[e._v("true")]),e._v("将会禁用弃用警告。 使用此属性代替 "),t("code",[e._v("-no-deprecation")]),e._v(" 命令行标志。")]),e._v(" "),t("h3",{attrs:{id:"process-resourcespath-只读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-resourcespath-只读"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.resourcesPath")]),e._v(" "),t("em",[e._v("只读")])]),e._v(" "),t("p",[t("code",[e._v("String")]),e._v(" 类型， 表示资源目录的路径。")]),e._v(" "),t("h3",{attrs:{id:"process-sandboxed-只读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-sandboxed-只读"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.sandboxed")]),e._v(" "),t("em",[e._v("只读")])]),e._v(" "),t("p",[e._v("一个 "),t("code",[e._v("Boolean")]),e._v("。 当渲染器进程被沙盒化时，该属性是 "),t("code",[e._v("true")]),e._v("，否则是 "),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"process-contextisolated-只读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-contextisolated-只读"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.contextIsolated")]),e._v(" "),t("em",[e._v("只读")])]),e._v(" "),t("p",[e._v("一个"),t("code",[e._v("Boolean")]),e._v("类型的值指明当前渲染上下文是否启用了"),t("code",[e._v("contextIsolation")]),e._v("。 这在主进程中是"),t("code",[e._v("undefined")]),e._v("的。")]),e._v(" "),t("h3",{attrs:{id:"process-throwdeprecation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-throwdeprecation"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.throwDeprecation")])]),e._v(" "),t("p",[t("code",[e._v("Boolean")]),e._v("类型，用于控制是否将弃用警告当做例外。 设置它为 "),t("code",[e._v("true")]),e._v(" 时会抛出错误。 使用此属性代替 "),t("code",[e._v("--throw-deprecation")]),e._v(" 命令行标志。")]),e._v(" "),t("h3",{attrs:{id:"process-tracedeprecation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-tracedeprecation"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.traceDeprecation")])]),e._v(" "),t("p",[t("code",[e._v("Boolean")]),e._v("类型，用于控制打印到 "),t("code",[e._v("stderr")]),e._v(" 的弃用中是否包含其堆栈跟踪。 将此设置为 "),t("code",[e._v("true")]),e._v(" 将会打印对弃用的堆栈跟踪。 此属性代替 "),t("code",[e._v("--trace-deprecation")]),e._v(" 命令行标志。")]),e._v(" "),t("h3",{attrs:{id:"process-traceprocesswarnings"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-traceprocesswarnings"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.traceProcessWarnings")])]),e._v(" "),t("p",[e._v("一个 "),t("code",[e._v("Boolean")]),e._v(", 用于控制是否将进程的警告打印到包含堆栈跟踪的 "),t("code",[e._v("stderr")]),e._v("中 。 将此设置为 "),t("code",[e._v("true")]),e._v(" 将打印对进程警告的堆栈跟踪（包括弃用）。 此属性代替 "),t("code",[e._v("--trace-warnings")]),e._v(" 命令行标志。")]),e._v(" "),t("h3",{attrs:{id:"process-type-只读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-type-只读"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.type")]),e._v(" "),t("em",[e._v("只读")])]),e._v(" "),t("p",[t("code",[e._v("String")]),e._v(" 代表当前进程的类型，可以是：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("browser")]),e._v(" - The main process")]),e._v(" "),t("li",[t("code",[e._v("renderer")]),e._v(" - A renderer process")]),e._v(" "),t("li",[t("code",[e._v("worker")]),e._v(" - In a web worker")])]),e._v(" "),t("h3",{attrs:{id:"process-versions-chrome-只读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-versions-chrome-只读"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.versions.chrome")]),e._v(" "),t("em",[e._v("只读")])]),e._v(" "),t("p",[t("code",[e._v("string")]),e._v("，一个表示 Chrome 版本的字符串。")]),e._v(" "),t("h3",{attrs:{id:"process-versions-electron-只读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-versions-electron-只读"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.versions.electron")]),e._v(" "),t("em",[e._v("只读")])]),e._v(" "),t("p",[t("code",[e._v("string")]),e._v("，一个表示 Electron 版本的字符串。")]),e._v(" "),t("h3",{attrs:{id:"process-windowsstore-只读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-windowsstore-只读"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.windowsStore")]),e._v(" "),t("em",[e._v("只读")])]),e._v(" "),t("p",[e._v("一个 "),t("code",[e._v("Boolean")]),e._v("。 如果应用以 Windows 商店应用(appx) 运行，该属性为"),t("code",[e._v("true")]),e._v("，否则为 "),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"process-contextid-只读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-contextid-只读"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.contextId")]),e._v(" "),t("em",[e._v("只读")])]),e._v(" "),t("p",[e._v("一个"),t("code",[e._v("字符串")]),e._v(" (可选) 代表当前JavaScript 上下文中的全局唯一ID。 每个对话框都有自己的 JavaScript 上下文。 当上下文隔离被启用，被隔离的环境中也有单独的JavaScript上下文。 该属性仅在渲染进程中可用。")]),e._v(" "),t("h2",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),t("p",[t("code",[e._v("process")]),e._v(" 对象具有以下方法:")]),e._v(" "),t("h3",{attrs:{id:"process-crash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-crash"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.crash()")])]),e._v(" "),t("p",[e._v("导致当前进程崩溃的主线程。")]),e._v(" "),t("h3",{attrs:{id:"process-getcreationtime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-getcreationtime"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.getCreationTime()")])]),e._v(" "),t("p",[e._v("返回 "),t("code",[e._v("Number | null")]),e._v(" -从纪元开始的毫秒数，如果信息不可用则返回"),t("code",[e._v("null")])]),e._v(" "),t("p",[e._v("指示应用程序的创建时间。 新时代（1970-01-01 00:00:00 UTC）以来的毫秒数表示的时间。 如果无法获得进程创建时间，则返回为空。")]),e._v(" "),t("h3",{attrs:{id:"process-getcpuusage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-getcpuusage"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.getCPUUsage()")])]),e._v(" "),t("p",[e._v("返回 "),t("RouterLink",{attrs:{to:"/《Electron中文文档》/api/structures/cpu-usage.html"}},[t("code",[e._v("CPUUsage")])])],1),e._v(" "),t("h3",{attrs:{id:"process-getiocounters-windows-linux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-getiocounters-windows-linux"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.getIOCounters()")]),e._v(" "),t("em",[e._v("Windows")]),e._v(" "),t("em",[e._v("Linux")])]),e._v(" "),t("p",[e._v("返回 "),t("RouterLink",{attrs:{to:"/《Electron中文文档》/api/structures/io-counters.html"}},[t("code",[e._v("IOCounters")])])],1),e._v(" "),t("h3",{attrs:{id:"process-getheapstatistics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-getheapstatistics"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.getHeapStatistics()")])]),e._v(" "),t("p",[e._v("返回 "),t("code",[e._v("Object")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("totalHeapSize")]),e._v(" Integer")]),e._v(" "),t("li",[t("code",[e._v("totalHeapSizeExecutable")]),e._v(" Integer")]),e._v(" "),t("li",[t("code",[e._v("totalPhysicalSize")]),e._v(" Integer")]),e._v(" "),t("li",[t("code",[e._v("totalAvailableSize")]),e._v(" Integer")]),e._v(" "),t("li",[t("code",[e._v("usedHeapSize")]),e._v(" Integer")]),e._v(" "),t("li",[t("code",[e._v("heapSizeLimit")]),e._v(" Integer")]),e._v(" "),t("li",[t("code",[e._v("mallocedMemory")]),e._v(" Integer")]),e._v(" "),t("li",[t("code",[e._v("peakMallocedMemory")]),e._v(" Integer")]),e._v(" "),t("li",[t("code",[e._v("doesZapGarbage")]),e._v(" Boolean")])]),e._v(" "),t("p",[e._v("返回包含 V8 堆统计的对象。 备注：所有数据值以KB为单位")]),e._v(" "),t("h3",{attrs:{id:"process-getblinkmemoryinfo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-getblinkmemoryinfo"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.getBlinkMemoryInfo()")])]),e._v(" "),t("p",[e._v("返回 "),t("code",[e._v("Object")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("allocated")]),e._v(" Integer - Size of all allocated objects in Kilobytes.")]),e._v(" "),t("li",[t("code",[e._v("marked")]),e._v(" Integer - Size of all marked objects in Kilobytes.")]),e._v(" "),t("li",[t("code",[e._v("total")]),e._v(" Integer - Total allocated space in Kilobytes.")])]),e._v(" "),t("p",[e._v("返回带有Blink内存信息的对象。 可以用于调试渲染/DOM相关内存问题。 请注意，所有值都以KB为单位")]),e._v(" "),t("h3",{attrs:{id:"process-getprocessmemoryinfo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-getprocessmemoryinfo"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.getProcessMemoryInfo()")])]),e._v(" "),t("p",[e._v("返回 "),t("code",[e._v("Promise<ProcessMemoryInfo>")]),e._v(" - Promise成功返回 "),t("RouterLink",{attrs:{to:"/《Electron中文文档》/api/structures/process-memory-info.html"}},[e._v("PrecessMemoryInfo")])],1),e._v(" "),t("p",[e._v("返回一个对象，提供当前进程的内存使用统计。 请注意，所有统计值都以KB为单位 这个api应该在应用程序准备就绪后被调用。")]),e._v(" "),t("p",[e._v("Chromium 没有为macOS提供 "),t("code",[e._v("residentSet")]),e._v(" 值。 因为macOS对最近未使用过的页面进行内存压缩。 结果是原始设置大小的值不是我们所期望的。 "),t("code",[e._v("私有")]),e._v(" 内存更能代表在 macOS 上进程的实际预压缩内存的使用情况。")]),e._v(" "),t("h3",{attrs:{id:"process-getsystemmemoryinfo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-getsystemmemoryinfo"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.getSystemMemoryInfo()")])]),e._v(" "),t("p",[e._v("返回 "),t("code",[e._v("Object")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("total")]),e._v(" Integer - 系统可用的物理内存总量(Kb)。")]),e._v(" "),t("li",[t("code",[e._v("free")]),e._v(" Integer - 应用程序或磁盘缓存未使用的内存总量。")]),e._v(" "),t("li",[t("code",[e._v("swapTotal")]),e._v(" Integer "),t("em",[e._v("Windows")]),e._v(" "),t("em",[e._v("Linux")]),e._v(" - 系统交换内存容量（单位：千字节）。")]),e._v(" "),t("li",[t("code",[e._v("swapFree")]),e._v(" Integer "),t("em",[e._v("Windows")]),e._v(" "),t("em",[e._v("Linux")]),e._v(" - 系统可用交换内存大小（单位：千字节）。")])]),e._v(" "),t("p",[e._v("返回一个对象，提供整个系统的内存使用统计。 请注意，所有统计值都以KB为单位")]),e._v(" "),t("h3",{attrs:{id:"process-getsystemversion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-getsystemversion"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.getSystemVersion()")])]),e._v(" "),t("p",[e._v("返回 "),t("code",[e._v("String")]),e._v(" - 主机操作系统的版本。")]),e._v(" "),t("p",[e._v("示例：")]),e._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" version "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" process"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("getSystemVersion")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("version"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// On macOS -> '10.13.6'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// On Windows -> '10.0.17763'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// On Linux -> '4.15.0-45-generic'")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("注意：")]),e._v(" 它返回实际操作系统版本，而不是在 macOS 上的内核版本，不同于 "),t("code",[e._v("os.release()")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"process-takeheapsnapshot-filepath"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-takeheapsnapshot-filepath"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.takeHeapSnapshot(filePath)")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("filePath")]),e._v(" String - Path to the output file.")])]),e._v(" "),t("p",[e._v("返回 "),t("code",[e._v("Boolean")]),e._v(" - 指明快捷方式是否被成功创建。")]),e._v(" "),t("p",[e._v("Takes a V8 heap snapshot and saves it to "),t("code",[e._v("filePath")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"process-hang"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-hang"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.hang()")])]),e._v(" "),t("p",[e._v("导致当前进程挂起的主线程。")]),e._v(" "),t("h3",{attrs:{id:"process-setfdlimit-maxdescriptors-macos-linux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-setfdlimit-maxdescriptors-macos-linux"}},[e._v("#")]),e._v(" "),t("code",[e._v("process.setFdLimit(maxDescriptors)")]),e._v(" "),t("em",[e._v("macOS")]),e._v(" "),t("em",[e._v("Linux")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("maxDescriptors")]),e._v(" Integer")])]),e._v(" "),t("p",[e._v("将文件描述符的软限制设置为 "),t("code",[e._v("maxDescriptors")]),e._v(" 或 OS 硬限制, 其中以当前进程较低的值为准。")])])}),[],!1,null,null,null);s.default=o.exports}}]);